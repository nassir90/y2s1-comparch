[%! "shifter.intralisp" %]
[%! "mux.intralisp" %]
[% in-package :shifter %]
[% defun entity ()
[@library ieee;
use ieee.std_logic_1164.all;

-- 00 = Transfer
-- 01 = Shift left
-- 10 = Shift rigtht
entity [%~ name %] is [% ports %]
end [%~ name %];

architecture Behavioural of [%~ name %] is
  [% mux:config "dp-3-1" [@
   component [%~ mux:name %] is [% mux:ports %]
   end component;@]%]

  [% mux:config "shifter-cflag" [@
   component [%~ mux:name %] is [% mux:ports %]
   end component;@]%]

   signal EN_C : std_logic;
   signal C_internal : std_logic;
begin
  [% loop for i from 0 below size do (mux:config "dp-3-1" [@
   BIT[%=i%]: [%~ mux:name %] [% mux:ports :uut
                              :subs `(("D0" . ,[@^B([%=i%])@])
                                      ("D1" . ,(if (= i (1- size)) "'0'" [@^B([%~1+ i%])@]))
                                      ("D2" . ,(if (= i 0) "'0'" [@^B([%~1- i%])@]))
                                      ("Q" . ,[@^G([%=i%])@])
                                      ("sel" . "S"))%]
  @])%]
   [% mux:config "shifter-cflag" [@
   CFlagMux: [%~ mux:name %] [% mux:ports :uut
                    :subs `(("Q" . "C_Internal")
                            ("D0" . "B(0)")
                            ("D1" . ,[@^B([%~1- size%])@])
                            ("sel" . "S(1)")) %]@]%]

   EN_C <= S(0) or s(1) after 5 ns;
   C <= C_internal and EN_C after 5 ns;

end Behavioural;@]%]
