[%! "register-file.intralisp" %]
[%! "register-file.intralisp" %]
[% in-package :register-file %]
[% defun tb ()
[@library ieee;
use ieee.std_logic_1164.all;

entity [%= name %]_TB is
end [%= name %]_TB;

architecture Behavioural of [%=name%]_TB is
component [%=name%] is [%ports%]
end component;
[% ports :signals %]
[% common:define-clock %]
begin
[% common:alternate-clock %]
uut: [%=name%] [%ports :uut%]
stim_proc: process
begin
    RW <= '1';
    TD <= "[%=~ "~4,'0b" 0 %]";
-- Demonstrate the setting of non-temporary registers
[% dotimes (i register-file:registers)
[@    wait until falling_edge(CLK);
    D <= "[%=~ "~32,'0b" (+ 21364466 i) %]";
    DR <= "[%=~ "~5,'0b" i %]";

@]%]

-- Demonstrate the setting of non-temporary registers
[% loop for i from 1 below  register-file:temp-registers do
[@    wait until falling_edge(CLK);
    D <= "[%=~ "~32,'0b" (+ 21364466 32 i) %]";
    TD <= "[%=~ "~4,'0b" i %]";

@]%]

        wait until falling_edge(CLK);
    RW <= '0';

-- Demonstrate reading from normal registers vi A port
   TD <= "0000";
   TA <= "0000";
   TB <= "0000";
   SB <= "00000";
[% loop for i from 0 below register-file:registers do
[@    wait until falling_edge(CLK);
      SA <= "[%=~ "~5,'0b" i %]";
@]%]

-- Demonstrate reading from temp registers via A port
[% loop for i from 1 below register-file:temp-registers do
[@    wait until falling_edge(CLK);
      TA <= "[%=~ "~4,'0b" i %]";
@]%]

      wait until rising_edge(CLK); -- Allow last temp register to change

    [% common:end-test %]
end process;
end Behavioural;
@]%]
