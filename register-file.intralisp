[%! "common.intralisp" %]
[%! "register.intralisp" %]
[% defpackage :register-file
 (:use :cl)
 (:export :registers
          :temp-registers
          :ports
          :name
          :entity
          :tb) %]
[% in-package :register-file %]
[% defvar registers 32 %]
[% defvar temp-registers 16 %]
[% defvar name (format nil "RF_RegisterFile_~d_~d_21364466" registers temp-registers ) %]
[% defun ports (&optional mode &key subs)
(let* ((select-size (log register:size 2))
       (temp-select-size (1- select-size))
       (common:mode mode)
       (common:subs subs))
(common:port-header)
[@
    [% loop for large in '("SA" "DR" "SB") do (common:port large :size select-size) (terpri) [@    @] %]
    [% loop for small in '("TD" "TB" "TA") do (common:port small :size temp-select-size) (terpri) [@    @] %]
    [% common:port "D" :size register:size %]
    [% common:port "A" :size register:size :direction "out" %]
    [% common:port "B" :size register:size :direction "out" %]
    [% unless (eq mode :signals) (common:port "CLK") %]
    [% common:port "RW" :end "" %][% common:port-trailer %]
@])%]