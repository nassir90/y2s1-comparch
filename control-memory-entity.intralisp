[%! "control-memory.intralisp" %]
[% in-package :control-memory %]
[% load "control-memory-content.lisp" %]
[% load "compiler.lisp" %]
[% defvar compiled-microcode (compile-microcode-and-assembly microcode assembly) %]
[% defun empty-at (i)
[@"[%=~ "~51,'0b" (+ 66 i) %]"[%~ if (= i (1- words)) "" "," %] -- 66 + [%= i %] = 0x[%=~ "~8,'0x" (+ 66 i) %]
@]%]
[% defun dump-micro-operations ()
 [@[% loop for i from 0 below 66 do [@    @] (empty-at i) %]
 [% dolist (function-code-pair functional-unit-functions)
     (let ((function-code (car function-code-pair))
           (function-name (cadr function-code-pair)))
    [@[%~parse-control-word `(,(concatenate 'string "\"" function-code "\"") r0 r1 r2
                              ,@(when (equal function-name "F=A^B") '(:na 66 :ms always :mc :control))) %], -- [%= function-name%]
    @]) %]
     [% loop for i from 81 below words do [@    @] (empty-at i) %]@]%]
[% defun dump-code ()
 [@[% loop for i from 0 below 66 do [@    @] (empty-at i) %]
    [% dolist (instruction compiled-microcode) [@[%=instruction%],
    @]%]
    [% loop for i from (+ 66 (length compiled-microcode)) below words do [@    @] (empty-at i) %]@]%]
[% defun entity () [@library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity [%~ name %] is [% ports %]
end [%~ name %];

architecture Behavioral of [%~ name %] is
  type rom_t is array (0 to [%~ 1- words %]) of std_logic_vector (50 downto 0);
  signal rom : rom_t := (
    [% dump-code %]
    );
  signal content : std_logic_vector(50 downto 0);
begin
  content <= rom(to_integer(unsigned(ADDRESS([%~ ceiling (log words 2) %] downto 0))));
[% down 50 control-commands %]
end Behavioral;@]%]
