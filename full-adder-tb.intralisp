[%! "full-adder.intralisp" %]
[%! "common.intralisp" %]
[% in-package :full-adder %]
[% defun tb ()
 (common:tb :name #'name :ports #'ports
:body [@^
stim_proc: process begin
[% dotimes (i 8)
 (let ((num (format nil "~3,'0b" i))) [@
    -- Reset values to zero
    A <= '0';
    B <= '0';
    C_IN <= '0';
    wait for 100 ns;

    -- Add [%~ aref num 0 %] and [%~ aref num 1 %] with carry in set to [%~ aref num 2 %]
    A <= '[%~ aref num 0 %]';
    B <= '[%~ aref num 1 %]';
    C_IN <= '[%~ aref num 2 %]';
    wait for 100 ns;
    
@])%]
  [% common:end-test :clocked nil %]
end process;                     
@]) %]
